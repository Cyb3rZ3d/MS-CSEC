import requests
import pprint
from fake_headers import Headers
from urllib.parse import urljoin
from VulnerabilityScanner.Injections import Injections


class SqlInjection(Injections):
    def __init__(self, quiet, url):
        """
        Initialize the SQL Injection Scanner.
        """
        super().__init__(quiet)
        self.header = Headers(headers=True)
        self.ses = requests.Session()
        self.quiet = quiet
        self.url = url
        self.vulnerabilities_tracker = []

    def scan_host(self, report):
        """
        Perform SQL Injection scan.
        Args:
            report: Report file object
        """
        report.write_to_report("\n [*] Checking for SQL Injection vulnerabilities \n \n")

        if not self.quiet:
            print("[*] Checking for SQL Injection vulnerabilities")

        # Retrieve all forms from the target URL
        forms = SqlInjection.get_all_forms_html(self.quiet, self.url)

        for form in forms:
            self.ses.headers = self.header.generate()
            f_details = SqlInjection.get_form_details(form)
            for mark in "\"'":
                data = {}
                for tag in f_details["inputs"]:
                    if tag["type"] == "hidden" or tag["value"]:
                        data[tag["name"]] = tag["value"] + mark
                    elif tag["type"] != "submit":
                        data[tag["name"]] = f"test{mark}"
                url = urljoin(self.url, f_details["action"])

                # Submit the form with the payload
                try:
                    if f_details["method"] == "post":
                        req = self.ses.post(url, data=data)
                    elif f_details["method"] == "get":
                        req = self.ses.get(url, params=data)
                    else:
                        continue

                    # Check for SQL Injection vulnerability
                    if req and SqlInjection.__find_strings(req):
                        self.vulnerabilities_tracker.append(url)  # âœ… TRACK VULNERABILITY
                        report.write_to_report("[Vulnerability] Found SQL Injection vulnerability! \n")
                        report.write_to_report("Form details of found vulnerability: \n \n")
                        report.write_to_report(pprint.pformat(f_details))
                        if not self.quiet:
                            print("[-] SQL Injection vulnerability detected")
                        break

                except requests.RequestException as e:
                    if not self.quiet:
                        print(f"[!] Request error during SQLi check on {url}: {e}")

    @staticmethod
    def __find_strings(res):
        """
        Look for SQL error strings in the response.
        Args:
            res: HTTP response object

        Returns:
            True if SQL error strings are found, False otherwise.
        """
        strings = {
            "error in your sql syntax",
            "warning: mysql",
            "quoted string not properly terminated",
            "unclosed quotation mark"
        }

        for string in strings:
            if string in res.content.decode().lower():
                return True
        return False

    def get_vuln_count(self):
        """
        Return the number of SQLi vulnerabilities found.
        """
        return len(self.vulnerabilities_tracker)
