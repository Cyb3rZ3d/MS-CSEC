import time
import os


class ReportGenerator:
    def __init__(self, givenurl):
        """
        Initialize the ReportGenerator with a given URL.
        Creates a filename with a timestamp and a .txt extension.
        """
        sanitized_url = self.__sanitize_url(givenurl)
        self.filename = f"audit_{sanitized_url}_{time.strftime('%Y%m%d-%H%M')}.txt"
        self.url = givenurl
        self.__create_report()

    def __sanitize_url(self, url):
        """
        Sanitize the URL to create a valid filename.
        Replaces invalid characters with underscores.
        Args:
            url: The URL to sanitize.
        Returns:
            A sanitized string suitable for filenames.
        """
        return url.replace("https://", "").replace("http://", "").replace("/", "_").replace(":", "_")

    def __create_report(self):
        """
        Create the initial report file with a header.
        """
        try:
            with open(self.filename, "w") as f:
                f.write("Audit for site: " + self.url + ", performed at: " + time.strftime("%Y-%m-%d %H:%M:%S") + "\n")
                f.write("=" * 50 + "\n\n")
        except IOError as e:
            print(f"[Error] Unable to create report file: {e}")

    def write_to_report(self, text):
        """
        Append text to the report file.
        Args:
            text: Text to be added to the report.
        """
        try:
            with open(self.filename, "a") as f:
                f.write(text)
        except IOError as e:
            print(f"[Error] Unable to write to report file: {e}")

    def read_report(self):
        """
        Read and return the contents of the report file.
        Returns:
            The contents of the report file as a string.
        """
        try:
            with open(self.filename, "r") as f:
                return f.read()
        except IOError as e:
            print(f"[Error] Unable to read report file: {e}")
            return ""

    def delete_report(self):
        """
        Delete the report file.
        """
        try:
            if os.path.exists(self.filename):
                os.remove(self.filename)
                print(f"[Info] Report file {self.filename} deleted successfully.")
            else:
                print(f"[Warning] Report file {self.filename} does not exist.")
        except OSError as e:
            print(f"[Error] Unable to delete report file: {e}")