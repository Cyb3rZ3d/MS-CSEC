import subprocess
import shlex
from urllib.parse import urlparse


class CommonPortsCheck:

    def __init__(self, quiet):
        """
        Initialize the Common Ports Check class.
        Args:
            quiet: Boolean to suppress console output if True.
        """
        self.quiet = quiet

    def scan_ports(self, url, report):
        """
        Scan ports of the provided URL using nmap.
        Args:
            url: URL of the site to be scanned.
            report: Report file object to log the results.
        """
        if not self.quiet:
            print("[*] Scanning common ports using nmap")

        # Parse the URL to extract the hostname
        parsed_url = urlparse(url)
        host = parsed_url.hostname

        if not host:
            if not self.quiet:
                print("[!] Invalid URL provided. Unable to extract hostname.")
            report.write_to_report("[Error] Invalid URL provided. Unable to extract hostname.\n")
            return

        # Prepare the nmap command
        nmap_command = f"nmap -F {host}"
        safe_command = shlex.split(nmap_command)

        try:
            # Execute the nmap command
            result = subprocess.run(safe_command, capture_output=True, text=True, check=True)
            report.write_to_report("\n[*****] Scanning common ports with nmap [*****]\n\n")
            report.write_to_report(result.stdout)

            if not self.quiet:
                print("[*] Common ports scan completed successfully.")
                print(result.stdout)

        except subprocess.CalledProcessError as e:
            error_message = f"An error occurred while scanning ports: {e}"
            if not self.quiet:
                print(error_message)
            report.write_to_report(f"[Error] {error_message}\n")

        except FileNotFoundError:
            error_message = "nmap is not installed or not found in PATH."
            if not self.quiet:
                print(error_message)
            report.write_to_report(f"[Error] {error_message}\n")

        except Exception as e:
            error_message = f"An unexpected error occurred: {e}"
            if not self.quiet:
                print(error_message)
            report.write_to_report(f"[Error] {error_message}\n")

        if not self.quiet:
            print("[*] Common ports scan process completed.")