import whois
import nmap


def read_domains_from_file(file_path):
    """Reads domains from a given file and returns them as a list."""
    try:
        with open(file_path, 'r') as file:
            domains = [line.strip() for line in file.readlines() if line.strip()]
        return domains
    except FileNotFoundError:
        print(f"Error: The file {file_path} was not found.")
        return []

def get_whois_info(domain):
    """Retrieves WHOIS information for a given domain."""
    try:
        domain_info = whois.whois(domain)
        return domain_info
    except Exception as e:
        return f"Error retrieving WHOIS info for {domain}: {e}"

def perform_whois_scan(domains, output_file):
    """Performs WHOIS scan on a list of domains and writes results to file."""
    results = {}
    for domain in domains:
        print(f"\nChecking WHOIS info for: {domain}")
        whois_info = get_whois_info(domain)
        print(whois_info)
        results[domain] = whois_info
    write_results_to_file(results, output_file, "whois")

def scan_ports(domain, scan_type="-F"):
    """Scans the given domain using nmap."""
    scanner = nmap.PortScanner()
    try:
        scan_result = scanner.scan(domain, arguments=scan_type)
        formatted_result = format_nmap_output(scan_result, domain)
        return formatted_result
    except Exception as e:
        return f"Error scanning {domain}: {e}"

def format_nmap_output(scan_result, domain):
    """Formats the Nmap scan results for user-friendly output."""
    if domain not in scan_result["scan"]:
        return f"No results found for {domain}"
    
    formatted_output = f"\nNmap Scan Results for {domain}:\n"
    for protocol in scan_result["scan"][domain]:
        formatted_output += f"Protocol: {protocol}\n"
        for port, details in scan_result["scan"][domain][protocol].items():
            formatted_output += f"  Port: {port} | State: {details['state']} | Service: {details.get('name', 'Unknown')}\n"
    return formatted_output

def perform_nmap_scan(domains, output_file, scan_type="-F"):
    """Performs Nmap scan on a list of domains and writes results to file."""
    results = {}
    for domain in domains:
        print(f"\nScanning {domain} with Nmap")
        nmap_info = scan_ports(domain, scan_type)
        print(nmap_info)
        results[domain] = nmap_info
    write_results_to_file(results, output_file, "nmap")

def write_results_to_file(results, output_file, scan_type):
    """Writes scan results to an output file."""
    try:
        with open(output_file, 'a') as file:
            for domain, info in results.items():
                file.write(f"{scan_type.upper()} scan results for {domain}:\n{info}\n{'-'*40}\n")
        print(f"{scan_type.upper()} results saved to {output_file}")
    except Exception as e:
        print(f"Error writing to file {output_file}: {e}")

def main():
    file_path = "5. Fall 2025 (5th Semester)/CSEC 5350 _ Intrusion Detection and Hacker Exploits/Assignment_1/domains.txt"  # Change this to your file path
    output_file = "5. Fall 2025 (5th Semester)/CSEC 5350 _ Intrusion Detection and Hacker Exploits/Assignment_1/whois_nmap_scan_results.txt"  # Output file path
    scan_type = "-F"  # Modify scan type as needed
    domains = read_domains_from_file(file_path)
    
    if not domains:
        print("No domains found to check.")
        return
    
    # Perform separate scans
    perform_whois_scan(domains, output_file)
    perform_nmap_scan(domains, output_file, scan_type)

if __name__ == "__main__":
    main()
