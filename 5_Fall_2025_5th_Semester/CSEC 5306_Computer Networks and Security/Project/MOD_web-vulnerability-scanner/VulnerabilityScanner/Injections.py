import requests
from bs4 import BeautifulSoup as bs
from abc import ABC, abstractmethod


class Injections(ABC):
    def __init__(self, quiet):
        """
        Initialize the Injections base class.
        Args:
            quiet: Boolean to suppress console output if True.
        """
        self.quiet = quiet

    @staticmethod
    def get_all_forms_html(quiet, url):
        """
        Retrieve all HTML forms from a given URL.
        Args:
            url: URL of the site.
            quiet: Boolean to suppress console output if True.
        Returns:
            A list of all forms present on the page.
        """
        if not quiet:
            print("[*] Retrieving HTML forms from the page.")
        try:
            req = requests.get(url, timeout=10)
            req.raise_for_status()
            soup = bs(req.content, 'html.parser')
            return soup.find_all('form')
        except requests.RequestException as e:
            if not quiet:
                print(f"[!] Error retrieving forms from {url}: {e}")
            return []

    @staticmethod
    def get_form_details(form):
        """
        Extract and return details of a given form.
        Args:
            form: A BeautifulSoup form object.
        Returns:
            A dictionary containing the action, method, and inputs of the form.
        """
        details_form = {}  # Dictionary for action, method, and inputs
        action = form.attrs.get('action', '').lower()
        method = form.attrs.get('method', 'get').lower()
        form_inputs = []

        # Handle input tags
        for tag in form.find_all("input"):
            input_type = tag.attrs.get("type", "text")
            input_name = tag.attrs.get("name")
            input_value = tag.attrs.get("value", "")
            form_inputs.append({"type": input_type, "name": input_name, "value": input_value})

        # Handle textarea tags
        for tag in form.find_all("textarea"):
            input_name = tag.attrs.get("name")
            input_value = tag.get_text()
            form_inputs.append({"type": "textarea", "name": input_name, "value": input_value})

        # Handle select tags and assume the first option is selected if no 'selected' attribute is present
        for tag in form.find_all("select"):
            input_name = tag.attrs.get("name")
            options = tag.find_all("option")
            selected_value = ""
            for option in options:
                if 'selected' in option.attrs:
                    selected_value = option.attrs.get("value", "")
                    break
            if not selected_value and options:
                selected_value = options[0].attrs.get("value", "")
            form_inputs.append({"type": "select", "name": input_name, "value": selected_value})

        # Populate the resulting dictionary
        details_form["action"] = action
        details_form["method"] = method
        details_form["inputs"] = form_inputs

        return details_form

    @abstractmethod
    def scan_host(self, *args, **kwargs):
        """
        Abstract method to be implemented by subclasses for scanning a host.
        """
        pass