import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

class Crawler:
    @staticmethod
    def deep_crawl(start_url, max_depth):
        """
        Retrieve unique URLs up to specified depth.
        """
        visited = set()
        urls_to_visit = [(start_url, 1)]
        base_host = urlparse(start_url).netloc
        collected_urls = set()

        while urls_to_visit:
            url, current_depth = urls_to_visit.pop(0)
            if current_depth > max_depth or url in visited:
                continue

            try:
                response = requests.get(url, timeout=5)
                soup = BeautifulSoup(response.content, 'html.parser')
                visited.add(url)
                collected_urls.add(url)

                if current_depth == max_depth:
                    continue

                for link in soup.find_all('a', href=True):
                    href = link.get('href')
                    next_url = urljoin(url, href)
                    if urlparse(next_url).netloc == base_host and next_url not in visited:
                        urls_to_visit.append((next_url, current_depth + 1))

            except requests.RequestException:
                continue

        return list(collected_urls)


    # @staticmethod
    # def get_forms(url):
    #     """
    #     Retrieve all forms from a given URL.
    #     """
    #     try:
    #         response = requests.get(url, timeout=5)
    #         soup = BeautifulSoup(response.content, 'html.parser')
    #         return soup.find_all('form')
    #     except requests.RequestException as e:
    #         print(f"[Error] Failed to fetch forms from {url}: {e}")
    #         return []

    @staticmethod
    def get_forms(url, quiet=False):
        try:
            response = requests.get(url, timeout=5)
            soup = BeautifulSoup(response.content, 'html.parser')
            return soup.find_all('form')
        except requests.RequestException as e:
            if not quiet:
                print(f"[Error] Failed to fetch forms from {url}: {e}")
            return []
