import os
import re
import requests
from colorama import Fore, Style
from fake_headers import Headers
from urllib.parse import urljoin
from collections import defaultdict
from VulnerabilityScanner.Injections import Injections
from VulnerabilityScanner.CommonPortsCheck import CommonPortsCheck
from VulnerabilityScanner.ReportGenerator import ReportGenerator
from VulnerabilityScanner.SecurityHeaders import SecurityHeaders
from VulnerabilityScanner.LFIScanner import LfiScanner
from VulnerabilityScanner.Crawler import Crawler


class XssScanner(Injections):
    def __init__(self, quiet, url, vulnerabilities_tracker=None):
        """
        Initialize the XSS Scanner.
        """
        super().__init__(quiet)
        self.url = url
        self.quiet = quiet
        self.vulnerabilities_tracker = vulnerabilities_tracker or set()
        self.header = Headers(headers=True)
        self.ses = requests.Session()


    def submit_form(self, action_url, method, form_data):
        """
        Submits a form with the injected script (XSS payload) and returns the response.
        """
        url = urljoin(self.url, action_url if action_url else self.url)
        try:
            if method == "post":
                response = self.ses.post(url, data=form_data, headers=self.header.generate(), timeout=10)
            else:
                response = self.ses.get(url, params=form_data, headers=self.header.generate(), timeout=10)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            if not self.quiet:
                print(f"[!] Error submitting form to {url}: {e}")
            return None

    def perform_attacks(self, report, url, quiet, xsspayload, global_vulnerabilities, vuln_counter):
        """
        Perform XSS attacks and track vulnerabilities.
        """
        if not quiet:
            print(f"Performing attacks on {url} with payload {xsspayload}")

        # Example attack logic (replace with actual XSS attack logic)
        forms = Crawler.get_forms(url)
        for form in forms:
            form_details = Injections.get_form_details(form)
            form_data = {input_tag["name"]: xsspayload for input_tag in form_details["inputs"] if input_tag["name"]}
            response = self.submit_form(form_details["action"], form_details["method"], form_data)

            if response and xsspayload in response.text:
                if not quiet:
                    print(Fore.RED + f"[Vulnerability Found] XSS vulnerability detected on {url}" + Style.RESET_ALL)
                report.write_to_report(f"[Vulnerability Found] XSS vulnerability detected on {url}\n")
                self.vulnerabilities_tracker.add(url)
                vuln_counter["XSS"] += 1

    def perform_scans(self, quiet, givenurl, urls, xsspayload, lfi_url, nohttps, summary):
        """
        Function performing scans and executing attacks.
        """
        global_vulnerabilities = set()
        vuln_counter = defaultdict(int)
        report = ReportGenerator(givenurl)

        # Sanitize output file name
        output_file = re.sub(r'[<>:"/\\|?*]', '_', f"{givenurl.replace('https://', '').replace('http://', '').replace('/', '_')}_scan_results.txt")
        with open(output_file, 'w') as file:
            ports = CommonPortsCheck(quiet)
            ports.scan_ports(givenurl, report)

            secheaders = SecurityHeaders(givenurl, quiet, nohttps)
            secheaders.check_security_headers(report)

            if lfi_url:
                lfi_advanced = LfiScanner(quiet, lfi_url)
                lfi_advanced.advanced_lfi(report)

            if not urls:
                urls = [givenurl]
            elif givenurl not in urls:
                urls.append(givenurl)

            file.write("\n[Info] Crawled URLs:\n" + "\n".join(urls) + "\n")
            report.write_to_report("\n[Info] Crawled URLs:\n" + "\n".join(urls) + "\n")

            form_count = 0
            for url in urls:
                forms = Crawler.get_forms(url)
                if not forms:
                    file.write(f"\n[Warning] No forms found on {url}\n")
                    report.write_to_report(f"\n[Warning] No forms found on {url}\n")
                    continue
                form_count += len(forms)
                file.write(f"\n[Info] Found {len(forms)} forms on {url}\n")
                report.write_to_report(f"\n[Info] Found {len(forms)} forms on {url}\n")

            file.write(f"\n[Summary] Total Forms Found: {form_count}\n")
            report.write_to_report(f"\n[Summary] Total Forms Found: {form_count}\n")

            for url in urls:
                file.write(f"\n[*****]  Checking URL: {url}  [*****] \n")
                report.write_to_report(f"\n [*****]  Checking URL: {url}  [*****] \n")
                if not quiet:
                    print(f"\n[*****]  Checking URL: {url}  [*****] \n")
                self.perform_attacks(report, url, quiet, xsspayload, global_vulnerabilities, vuln_counter)

            if summary:
                summary_text = '\n[Summary] Vulnerability Counts:\n'
                file.write(summary_text)
                print(Fore.CYAN + summary_text + Style.RESET_ALL)
                for vuln_type, count in vuln_counter.items():
                    vuln_summary = f"\n{vuln_type}: {count}\n"
                    file.write(vuln_summary)
                    print(vuln_summary)
                    report.write_to_report(vuln_summary)

        print(f"Scan results saved to {output_file}")
        
        
    def scan_host(self, report, xsspayload):
        """
        Fulfill abstract method requirement. Wrapper for perform_attacks().
        """
        self.perform_attacks(report, self.url, self.quiet, xsspayload, self.vulnerabilities_tracker, defaultdict(int))       