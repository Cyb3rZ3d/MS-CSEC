import requests
from fake_headers import Headers


class LfiScanner:

    def __init__(self, quiet, url):
        """
        Initialize the LFI Scanner.
        """
        self.quiet = quiet
        self.url = url
        self.header = Headers(headers=True)  # Generate miscellaneous headers
        self.ses = requests.Session()
        self.vulnerabilities_tracker = []

    def basic_scan_host(self, report):
        """
        Perform a basic LFI scan on the host.
        Args:
            report: Report file object
        """
        url_args = [
            'index.php?page=', 'index.php?Page=', 'index.php?id=',
            'index.php?addr=', 'layout.php?page=', 'layout.php?Page=',
            'layout.php?id=', 'layout.php?addr='
        ]

        if not self.quiet:
            print("[*] Performing basic LFI scan")

        for arg in url_args:
            self.ses.headers = self.header.generate()
            with open("payloads/LFI_short.txt", "r") as f:
                for line in f:
                    payload = line.strip()
                    url_try = self.url + "/" + arg + payload
                    try:
                        req = self.ses.get(url_try, allow_redirects=False, timeout=10)
                        if "root" in req.content.decode('utf-8'):
                            report.write_to_report(f"[Vulnerability] Found LFI vulnerability, path: {url_try}\n")
                            if not self.quiet:
                                print(f"[-] LFI vulnerability found at {url_try}")
                    except requests.RequestException as e:
                        if not self.quiet:
                            print(f"[!] Error during LFI scan for {url_try}: {e}")

    def advanced_lfi(self, report):
        """
        Perform an advanced LFI scan on the host.
        Args:
            report: Report file object
        """
        if not self.quiet:
            print("[*] Performing advanced LFI scan on extra URL")
        report.write_to_report("\n[*] Performing advanced LFI scan on extra URL\n\n")

        with open("payloads/LFI_short.txt", "r") as f:
            self.ses.headers = self.header.generate()
            for line in f:
                payload = line.strip()
                url_try = self.url + payload
                try:
                    req = self.ses.get(url_try, allow_redirects=False, timeout=10)
                    if "root" in req.content.decode('utf-8') or "mail" in req.content.decode('utf-8'):
                        report.write_to_report(f"[Vulnerability] Found LFI vulnerability, path: {url_try}\n")
                        if not self.quiet:
                            print(f"[-] LFI vulnerability found at {url_try}")
                except requests.RequestException as e:
                    if not self.quiet:
                        print(f"[!] Error during advanced LFI scan for {url_try}: {e}")